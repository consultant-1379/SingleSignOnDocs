		----------------------------------
				SSO Environment Setup
		----------------------------------
				Alex McAllister
		-----------------------------------
				2013-03-28

SSO Environment Setup

=============

* Prerequeisites

    * Ericsson Root CA certificate

    * Shell access to the master server (ms1)

    * Core MW campaings are not yet run

    * DNS aliases of SC-1 and SC-2 (resolvable from a user's browser)

    * IP addresses of the COM-INF LDAP hosts

* Script to Prepare Environment (Peer Nodes) for SSO

	A certain amount of DNS bluffing and certificate setup has to be in place before the SSO installation script is run. Here is a sample script to make the process easier. Copy this into a file on the master server and save the file as an executable script.

+-----------------------------------+
#!/bin/bash
#script to configure SSO - manual steps
#

##
## If an argument was passed, assume it is the config file
##
CONFIG_FILE=$1
SCRIPT_NAME=`basename $0`
VALUE=""

get_value ()
{
        local field=${1}
        local num_occurances=`grep -c ${field} ${CONFIG_FILE}`
        if [ ${num_occurances}  -ne 1 ]; then
                echo "${1} not present or more occurs more than once in ${CONFIG_FILE}. Exiting"
                exit 1
        fi

        local line=$( grep ${field} ${CONFIG_FILE} )
        VALUE=$( echo ${line} | cut -d= -f 2 | sed "s/'//g;s/\"//g" )
        return 0
}

if [ ! -f "${1}" ]; then
        echo "Usage: ${SCRIPT_NAME} <config-file> <node-1-dns-name> <node-2-dns-name> <ldap1-ip> <ldap2-ip>"
        echo -e "${1} does not exist. Please pass a valid config file generated by ci-fwk web pages at\n"
        echo "http://... as the first argument"
        echo -e "\n<node-1-dns-name> can be obtained by running 'nslookup ${SC1_IP}' from a machine with a DNS server."
        echo -e "\n<node-2-dns-name> can be obtained by running 'nslookup ${SC2_IP}' from a machine with a DNS server."
        echo -e "\n<ldap1-ip> can be obtained by running nslookup on the first LDAP host name given in the properties file from a machine with a DNS server."
        echo -e "\n<ldap2-ip> can be obtained by running nslookup on the second LDAP host name given in the properties file from a machine with a DNS server."
        echo -e "\nThe dns-name whould be of the form 'atrcxbXXXX-X.athtem.ericsson.se'. If it is different to this, this script may not work as intended"
        exit 1
fi

##
## To be filled in by user
##
get_value "ip_address_pool_sc1_addr"
SC1_IP=${VALUE}
get_value "ip_address_pool_sc2_addr"
SC2_IP=${VALUE}
get_value "sso_instance_0_ip"
SC1_JBOSS_SSO_IP=${VALUE}
get_value "sso_instance_1_ip"
SC2_JBOSS_SSO_IP=${VALUE}

if [ "${#}" -ne 5 ]; then
echo "Usage: ${SCRIPT_NAME} <config-file> <node-1-dns-name> <node-2-dns-name> <ldap1-ip> <ldap2-ip>"
        echo -e "\n<node-1-dns-name> can be obtained by running 'nslookup ${SC1_IP}' from a machine with a DNS server."
        echo -e "\n<node-2-dns-name> can be obtained by running 'nslookup ${SC2_IP}' from a machine with a DNS server."
        echo -e "\n<ldap1-ip> can be obtained by running nslookup on the first LDAP host name given in the properties file from a machine with a DNS server."
        echo -e "\n<ldap2-ip> can be obtained by running nslookup on the second LDAP host name given in the properties file from a machine with a DNS server."
        echo -e "\nThe dns-name whould be of the form 'atrcxbXXXX-X.athtem.ericsson.se'. If it is different to this, this script may not work as intended"
        exit 1
fi

SC1_DNS_NAME="${2}"
SC2_DNS_NAME="${3}"
SC1_JBOSS_SSO_ALIAS=sso.${SC1_DNS_NAME}
SC2_JBOSS_SSO_ALIAS=sso.${SC2_DNS_NAME}
LDAP1_IP="${4}"
LDAP2_IP="${5}"

LDAP1_DNS_NAME=$( grep COM_INF_LDAP_HOST_1 ./global-SC-1.properties | cut -d= -f2 )
LDAP2_DNS_NAME=$( grep COM_INF_LDAP_HOST_2 ./global-SC-1.properties | cut -d= -f2 )

echo "Using the following default values - cancel with 10 seconds to stop script and edit the properties files before running this script again"
for file in "./global-SC-?.properties"; do
        echo "$file"
        cat $file

done

echo "Waiting for interrupt..."
sleep 10

#Copy properties files to /cluster/parameters dir:
if test -e /exports/cluster/parameters/global-SC-1.properties; then
    echo "it looks the global-SC-1.properties file is already installed ..."
else
    mkdir -vp /exports/cluster/parameters/ || exit 1
    cp -v global-SC-?.properties /exports/cluster/parameters  || exit 1
fi

SC1_COMMAND="ssh sc-1 'echo -e \"${SC1_IP}       ${SC1_DNS_NAME}\n${SC1_JBOSS_SSO_IP}    ${SC1_JBOSS_SSO_ALIAS}\n${LDAP1_IP}   ${LDAP1_DNS_NAME}\n${LDAP2_IP}   ${LDAP2_DNS_NAME}\" >> /etc/hosts'"
SC2_COMMAND="ssh sc-2 'echo -e \"${SC2_IP}      ${SC2_DNS_NAME}\n${SC2_JBOSS_SSO_IP}    ${SC2_JBOSS_SSO_ALIAS}\n${LDAP1_IP}   ${LDAP1_DNS_NAME}\n${LDAP2_IP}   ${LDAP2_DNS_NAME}\" >> /etc/hosts'"

#update /etc/hosts file
#SC-1
res=$(ssh sc-1 "grep -q ${SC1_JBOSS_SSO_ALIAS} /etc/hosts && echo updated")

if [[ $res == updated ]]; then
    echo "It seems the /etc/hosts file on SC-1 is alredy updated"
else
    echo "Attempting to update /etc/hosts on SC-1"
    #use the sc-1 address for ${SC1_DNS_NAME}, jboss SSO vip address for ${SC1_JBOSS_SSO_ALIAS}
    eval ${SC1_COMMAND}
fi
echo "/etc/hosts on sc-1:"
ssh sc-1 "cat /etc/hosts"

#SC-2
res=$(ssh sc-2 "grep -q ${SC2_JBOSS_SSO_ALIAS} /etc/hosts && echo updated")

if [[ $res == updated ]]; then
    echo "It seems the /etc/hosts file on SC-2 is alredy updated"
else
    echo "Attempting to update /etc/hosts on SC-2"
    #use the sc-2 address for ${SC2_DNS_NAME}, jboss SSO vip address for ${SC2_JBOSS_SSO_ALIAS}
    eval ${SC2_COMMAND}
fi
echo "/etc/hosts on sc-1:"
ssh sc-2 "cat /etc/hosts"

echo "Uploading and importing rootca.cer ..."
scp rootca.cer sc-1:/var/tmp
scp rootca.cer sc-2:/var/tmp

ssh sc-1 '/usr/java/default/bin/keytool -import -noprompt -alias sso -storepass changeit -keystore /usr/java/default/jre/lib/security/cacerts -file /var/tmp/rootca.cer'
ssh sc-2 '/usr/java/default/bin/keytool -import -noprompt -alias sso -storepass changeit -keystore /usr/java/default/jre/lib/security/cacerts -file /var/tmp/rootca.cer'
+-----------------------------------+

* Sample Properties File

+-----------------------------------+
UI_PRES_SERVER=atrcxbXXXX-X.athtem.eei.ericsson.se
SSO_COOKIE_DOMAIN=.ericsson.se
COM_INF_LDAP_HOST_1=atrcxb2582.athtem.eei.ericsson.se
COM_INF_LDAP_HOST_2=atrcxb2582.athtem.eei.ericsson.se
COM_INF_LDAP_PORT=636
COM_INF_LDAP_ROOT_SUFFIX=dc=atrcxb2595-2596,dc=com
COM_INF_LDAP_ADMIN_CN="directory manager"
COM_INF_LDAP_ADMIN_ACCESS=ldapadmin
+-----------------------------------+

* Usage

    * Create a directory on the ms and copy the above script, copies of the sample properties file above to global-SC-1.properties and global-SC-2.properties and the Ericsson Root CA certificate.

    * Ensure there is a valid config file generated by the {{{https://cifwk-oss.lmera.ericsson.se/dmt/}CI-Fwk DMT}}

    * Gather the 5 arguments needed to be passed - run <<<nslookup>>> from a machine with access to a DNS server for the SC IP addresses and the LDAP host being used

        * DMT config file location (usually <<</opt/ericsson/nms/litp/bin/deployment/etc/single-node.cfg>>> or similar)
        
        * DNS name of SC-1

        * DNS name of SC-2

        * IP addresses of LDAP hosts - we have been mainly using <<atrcxb2582.athtem.eei.ericsson.se>> so this would be <<<10.59.132.76>>> for both arguments

    * Move to the directory where you put the script, root CA certificate and properties files. Run the above script with the following syntax:

+-----------------------------------------+
./<script-name> <dmt-config-file> <node-1-dns-name> <node-2-dns-name> <ldap1-ip> <ldap2-ip>
+-----------------------------------------+

    * End result is <<</etc/hosts>>> on each node is updated, the global properties files are in the correct location and have the correct information, and the root CA certificate is imported into the default Java keystore on each node